{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Marketplace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "marketplace_contract",
          "type": "address"
        }
      ],
      "name": "Marketplace__NotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace__NotEnoughMoneyToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Marketplace__NotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Marketplace__NotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Marketplace__NotValidPrice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePaid",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ListingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatedListing",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct Marketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7db9a2a50dcfdc759a250a4b908183961b66b63cfc5fe495690d2f3bab54783b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1322669",
    "logsBloom": "0x
    "blockHash": "0x28ad694dfd22493c4d25f97d8ed768a9e645142a9268485245e319f12c1c04bb",
    "transactionHash": "0x7db9a2a50dcfdc759a250a4b908183961b66b63cfc5fe495690d2f3bab54783b",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1322669",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ce322456de340d691c6736d3b8405bcd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Marketplace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketplace_contract\",\"type\":\"address\"}],\"name\":\"Marketplace__NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace__NotEnoughMoneyToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Marketplace__NotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Marketplace__NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Marketplace__NotValidPrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatedListing\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct Marketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror Marketplace__NotValidPrice(uint256 price);\\nerror Marketplace__NotApproved(uint256 tokenId, address marketplace_contract);\\nerror Marketplace__NotOwner(address nftAddress, uint256 tokenId, address user);\\nerror Marketplace__AlreadyListed(address nftAddress, uint256 tokenId);\\nerror Marketplace__NotListed(address nftAddress, uint256 tokenId);\\nerror Marketplace__TokenDoesNotExist(address nftAddress, uint256 tokenId);\\nerror Marketplace__NotEnoughMoneyToWithdraw();\\n\\ncontract Marketplace is ReentrancyGuard {\\n  struct Listing {\\n    uint256 price;\\n    address seller;\\n  }\\n\\n  event ItemListed(\\n    address nftAddress,\\n    uint256 tokenId,\\n    uint256 price,\\n    address seller\\n  );\\n  event ItemBought(\\n    address nftAddress,\\n    uint256 tokenId,\\n    address seller,\\n    address buyer,\\n    uint256 pricePaid\\n  );\\n  event ListingCancelled(address nftAddress, uint256 tokenId, address owner);\\n  event UpdatedListing(address nftAddress, uint256 tokenId, uint256 price);\\n\\n  mapping(address => mapping(uint256 => Listing)) private listings;\\n  mapping(address => uint256) private proceeds;\\n\\n  /* ========================= MODIFIERS ========================= */\\n  modifier isOwner(\\n    address nftAddress,\\n    uint256 tokenId,\\n    address user\\n  ) {\\n    IERC721 nft = IERC721(nftAddress);\\n    if (nft.ownerOf(tokenId) != user)\\n      revert Marketplace__NotOwner(nftAddress, tokenId, user);\\n    _;\\n  }\\n\\n  modifier isListed(address nftAddress, uint256 tokenId) {\\n    if (listings[nftAddress][tokenId].price <= 0)\\n      revert Marketplace__NotListed(nftAddress, tokenId);\\n    _;\\n  }\\n\\n  modifier notListed(address nftAddress, uint256 tokenId) {\\n    if (listings[nftAddress][tokenId].price > 0)\\n      revert Marketplace__AlreadyListed(nftAddress, tokenId);\\n    _;\\n  }\\n\\n  /* ============================================================ */\\n\\n  /* =========================== MAIN =========================== */\\n  function listItem(\\n    address nftAddress,\\n    uint256 tokenId,\\n    uint256 price\\n  )\\n    external\\n    isOwner(nftAddress, tokenId, msg.sender)\\n    notListed(nftAddress, tokenId)\\n  {\\n    if (price <= 0) revert Marketplace__NotValidPrice(price);\\n\\n    IERC721 nft = IERC721(nftAddress);\\n    if (nft.getApproved(tokenId) != address(this))\\n      revert Marketplace__NotApproved(tokenId, address(this));\\n\\n    listings[nftAddress][tokenId] = Listing(price, msg.sender);\\n    emit ItemListed(nftAddress, tokenId, price, msg.sender);\\n  }\\n\\n  function buyItem(\\n    address nftAddress,\\n    uint256 tokenId\\n  ) external payable isListed(nftAddress, tokenId) nonReentrant {\\n    Listing memory listedItem = listings[nftAddress][tokenId];\\n\\n    if (msg.value < listedItem.price)\\n      revert Marketplace__NotValidPrice(listedItem.price);\\n\\n    proceeds[listedItem.seller] += msg.value;\\n\\n    delete (listings[nftAddress][tokenId]);\\n\\n    IERC721(nftAddress).safeTransferFrom(\\n      listedItem.seller,\\n      msg.sender,\\n      tokenId\\n    );\\n\\n    emit ItemBought(\\n      nftAddress,\\n      tokenId,\\n      listedItem.seller,\\n      msg.sender,\\n      msg.value\\n    );\\n  }\\n\\n  function cancelListing(\\n    address nftAddress,\\n    uint256 tokenId\\n  )\\n    external\\n    isOwner(nftAddress, tokenId, msg.sender)\\n    isListed(nftAddress, tokenId)\\n  {\\n    delete (listings[nftAddress][tokenId]);\\n    emit ListingCancelled(nftAddress, tokenId, msg.sender);\\n  }\\n\\n  function updateListing(\\n    address nftAddress,\\n    uint256 tokenId,\\n    uint256 newPrice\\n  )\\n    external\\n    isOwner(nftAddress, tokenId, msg.sender)\\n    isListed(nftAddress, tokenId)\\n  {\\n    if (newPrice <= 0) revert Marketplace__NotValidPrice(newPrice);\\n\\n    listings[nftAddress][tokenId].price = newPrice;\\n    emit UpdatedListing(nftAddress, tokenId, newPrice);\\n  }\\n\\n  function withdrawProceeds() external nonReentrant {\\n    uint256 proceed = proceeds[msg.sender];\\n    if (proceed <= 0) revert Marketplace__NotEnoughMoneyToWithdraw();\\n\\n    proceeds[msg.sender] = 0;\\n\\n    (bool success, ) = payable(msg.sender).call{value: proceed}(\\\"\\\");\\n    require(success, \\\"Transfer failed\\\");\\n  }\\n\\n  /* ============================================================ */\\n\\n  function getListing(\\n    address nftAddress,\\n    uint256 tokenId\\n  ) external view returns (Listing memory) {\\n    return listings[nftAddress][tokenId];\\n  }\\n\\n  function getProceeds(address seller) external view returns (uint256) {\\n    return proceeds[seller];\\n  }\\n}\\n\",\"keccak256\":\"0x8c58883d9fb3292c2a7e4bd3160d4d6105cb2e1d47a15186d724ad6be8717f35\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000819055506116ab806100286000396000f3fe6080604052600436106100705760003560e01c80639038e6931161004e5780639038e693146101185780639f37092a1461012f578063b2ddee061461014b578063f772adf11461017457610070565b806330cfeda91461007557806388700d1c146100b257806389bfd38f146100ef575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611159565b61019d565b6040516100a9919061119f565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d491906111e6565b6101e6565b6040516100e69190611273565b60405180910390f35b3480156100fb57600080fd5b506101166004803603810190610111919061128e565b6102b1565b005b34801561012457600080fd5b5061012d6106ae565b005b610149600480360381019061014491906111e6565b610831565b005b34801561015757600080fd5b50610172600480360381019061016d91906111e6565b610b82565b005b34801561018057600080fd5b5061019b6004803603810190610196919061128e565b610de9565b005b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6101ee6110c6565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b82823360008390508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610309919061119f565b60206040518083038186803b15801561032157600080fd5b505afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035991906112f6565b73ffffffffffffffffffffffffffffffffffffffff16146103b5578383836040517f616d412e0000000000000000000000000000000000000000000000000000000081526004016103ac93929190611332565b60405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411156104525781816040517f63bf5108000000000000000000000000000000000000000000000000000000008152600401610449929190611369565b60405180910390fd5b6000871161049757866040517f7b83330d00000000000000000000000000000000000000000000000000000000815260040161048e919061119f565b60405180910390fd5b60008990503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8b6040518263ffffffff1660e01b81526004016104ec919061119f565b60206040518083038186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c91906112f6565b73ffffffffffffffffffffffffffffffffffffffff16146105965788306040517f697bcaad00000000000000000000000000000000000000000000000000000000815260040161058d929190611392565b60405180910390fd5b60405180604001604052808981526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507ff72a1a7f0543c16546019eb0a601ab3e64090c3eec1a7f6479355bf2e9f49c498a8a8a3360405161069a94939291906113bb565b60405180910390a150505050505050505050565b6106b661106c565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610734576040517f25e2363000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161079f90611431565b60006040518083038185875af1925050503d80600081146107dc576040519150601f19603f3d011682016040523d82523d6000602084013e6107e1565b606091505b5050905080610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081c906114a3565b60405180910390fd5b505061082f6110bc565b565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154116108cd5781816040517f6328357d0000000000000000000000000000000000000000000000000000000081526004016108c4929190611369565b60405180910390fd5b6108d561106c565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080600001513410156109e15780600001516040517f7b83330d0000000000000000000000000000000000000000000000000000000081526004016109d8919061119f565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a3491906114f2565b92505081905550600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508473ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133876040518463ffffffff1660e01b8152600401610afe93929190611548565b600060405180830381600087803b158015610b1857600080fd5b505af1158015610b2c573d6000803e3d6000fd5b505050507ff206e7b297bafe2d31f147e6050538b35b5dd424b658411bd58cfccfdf7b3781858583602001513334604051610b6b95949392919061157f565b60405180910390a150610b7c6110bc565b50505050565b81813360008390508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610bda919061119f565b60206040518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a91906112f6565b73ffffffffffffffffffffffffffffffffffffffff1614610c86578383836040517f616d412e000000000000000000000000000000000000000000000000000000008152600401610c7d93929190611332565b60405180910390fd5b85856000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411610d225781816040517f6328357d000000000000000000000000000000000000000000000000000000008152600401610d19929190611369565b60405180910390fd5b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f8526cb6d400b8a551983c99e6d6fb1775b7a0deeb5d1e39d3ee65bc59e5eac27888833604051610dd793929190611332565b60405180910390a15050505050505050565b82823360008390508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e41919061119f565b60206040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9191906112f6565b73ffffffffffffffffffffffffffffffffffffffff1614610eed578383836040517f616d412e000000000000000000000000000000000000000000000000000000008152600401610ee493929190611332565b60405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411610f895781816040517f6328357d000000000000000000000000000000000000000000000000000000008152600401610f80929190611369565b60405180910390fd5b60008711610fce57866040517f7b83330d000000000000000000000000000000000000000000000000000000008152600401610fc5919061119f565b60405180910390fd5b86600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600001819055507fd4c3e4912897a89f2c4e08032717e11245fbd1ad3a1efc0fd2b002a9c8076993898989604051611059939291906115d2565b60405180910390a1505050505050505050565b600260005414156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a990611655565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611126826110fb565b9050919050565b6111368161111b565b811461114157600080fd5b50565b6000813590506111538161112d565b92915050565b60006020828403121561116f5761116e6110f6565b5b600061117d84828501611144565b91505092915050565b6000819050919050565b61119981611186565b82525050565b60006020820190506111b46000830184611190565b92915050565b6111c381611186565b81146111ce57600080fd5b50565b6000813590506111e0816111ba565b92915050565b600080604083850312156111fd576111fc6110f6565b5b600061120b85828601611144565b925050602061121c858286016111d1565b9150509250929050565b61122f81611186565b82525050565b61123e8161111b565b82525050565b60408201600082015161125a6000850182611226565b50602082015161126d6020850182611235565b50505050565b60006040820190506112886000830184611244565b92915050565b6000806000606084860312156112a7576112a66110f6565b5b60006112b586828701611144565b93505060206112c6868287016111d1565b92505060406112d7868287016111d1565b9150509250925092565b6000815190506112f08161112d565b92915050565b60006020828403121561130c5761130b6110f6565b5b600061131a848285016112e1565b91505092915050565b61132c8161111b565b82525050565b60006060820190506113476000830186611323565b6113546020830185611190565b6113616040830184611323565b949350505050565b600060408201905061137e6000830185611323565b61138b6020830184611190565b9392505050565b60006040820190506113a76000830185611190565b6113b46020830184611323565b9392505050565b60006080820190506113d06000830187611323565b6113dd6020830186611190565b6113ea6040830185611190565b6113f76060830184611323565b95945050505050565b600081905092915050565b50565b600061141b600083611400565b91506114268261140b565b600082019050919050565b600061143c8261140e565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061148d600f83611446565b915061149882611457565b602082019050919050565b600060208201905081810360008301526114bc81611480565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114fd82611186565b915061150883611186565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561153d5761153c6114c3565b5b828201905092915050565b600060608201905061155d6000830186611323565b61156a6020830185611323565b6115776040830184611190565b949350505050565b600060a0820190506115946000830188611323565b6115a16020830187611190565b6115ae6040830186611323565b6115bb6060830185611323565b6115c86080830184611190565b9695505050505050565b60006060820190506115e76000830186611323565b6115f46020830185611190565b6116016040830184611190565b949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061163f601f83611446565b915061164a82611609565b602082019050919050565b6000602082019050818103600083015261166e81611632565b905091905056fea2646970667358221220bb31fa783b596c891a370c83146a1ee706d8ffcada0b13efc876bfec44d90c9c64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80639038e6931161004e5780639038e693146101185780639f37092a1461012f578063b2ddee061461014b578063f772adf11461017457610070565b806330cfeda91461007557806388700d1c146100b257806389bfd38f146100ef575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190611159565b61019d565b6040516100a9919061119f565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d491906111e6565b6101e6565b6040516100e69190611273565b60405180910390f35b3480156100fb57600080fd5b506101166004803603810190610111919061128e565b6102b1565b005b34801561012457600080fd5b5061012d6106ae565b005b610149600480360381019061014491906111e6565b610831565b005b34801561015757600080fd5b50610172600480360381019061016d91906111e6565b610b82565b005b34801561018057600080fd5b5061019b6004803603810190610196919061128e565b610de9565b005b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6101ee6110c6565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b82823360008390508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610309919061119f565b60206040518083038186803b15801561032157600080fd5b505afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035991906112f6565b73ffffffffffffffffffffffffffffffffffffffff16146103b5578383836040517f616d412e0000000000000000000000000000000000000000000000000000000081526004016103ac93929190611332565b60405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411156104525781816040517f63bf5108000000000000000000000000000000000000000000000000000000008152600401610449929190611369565b60405180910390fd5b6000871161049757866040517f7b83330d00000000000000000000000000000000000000000000000000000000815260040161048e919061119f565b60405180910390fd5b60008990503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8b6040518263ffffffff1660e01b81526004016104ec919061119f565b60206040518083038186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c91906112f6565b73ffffffffffffffffffffffffffffffffffffffff16146105965788306040517f697bcaad00000000000000000000000000000000000000000000000000000000815260040161058d929190611392565b60405180910390fd5b60405180604001604052808981526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507ff72a1a7f0543c16546019eb0a601ab3e64090c3eec1a7f6479355bf2e9f49c498a8a8a3360405161069a94939291906113bb565b60405180910390a150505050505050505050565b6106b661106c565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610734576040517f25e2363000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161079f90611431565b60006040518083038185875af1925050503d80600081146107dc576040519150601f19603f3d011682016040523d82523d6000602084013e6107e1565b606091505b5050905080610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081c906114a3565b60405180910390fd5b505061082f6110bc565b565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154116108cd5781816040517f6328357d0000000000000000000000000000000000000000000000000000000081526004016108c4929190611369565b60405180910390fd5b6108d561106c565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080600001513410156109e15780600001516040517f7b83330d0000000000000000000000000000000000000000000000000000000081526004016109d8919061119f565b60405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a3491906114f2565b92505081905550600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508473ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133876040518463ffffffff1660e01b8152600401610afe93929190611548565b600060405180830381600087803b158015610b1857600080fd5b505af1158015610b2c573d6000803e3d6000fd5b505050507ff206e7b297bafe2d31f147e6050538b35b5dd424b658411bd58cfccfdf7b3781858583602001513334604051610b6b95949392919061157f565b60405180910390a150610b7c6110bc565b50505050565b81813360008390508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610bda919061119f565b60206040518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a91906112f6565b73ffffffffffffffffffffffffffffffffffffffff1614610c86578383836040517f616d412e000000000000000000000000000000000000000000000000000000008152600401610c7d93929190611332565b60405180910390fd5b85856000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411610d225781816040517f6328357d000000000000000000000000000000000000000000000000000000008152600401610d19929190611369565b60405180910390fd5b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f8526cb6d400b8a551983c99e6d6fb1775b7a0deeb5d1e39d3ee65bc59e5eac27888833604051610dd793929190611332565b60405180910390a15050505050505050565b82823360008390508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e41919061119f565b60206040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9191906112f6565b73ffffffffffffffffffffffffffffffffffffffff1614610eed578383836040517f616d412e000000000000000000000000000000000000000000000000000000008152600401610ee493929190611332565b60405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411610f895781816040517f6328357d000000000000000000000000000000000000000000000000000000008152600401610f80929190611369565b60405180910390fd5b60008711610fce57866040517f7b83330d000000000000000000000000000000000000000000000000000000008152600401610fc5919061119f565b60405180910390fd5b86600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600001819055507fd4c3e4912897a89f2c4e08032717e11245fbd1ad3a1efc0fd2b002a9c8076993898989604051611059939291906115d2565b60405180910390a1505050505050505050565b600260005414156110b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a990611655565b60405180910390fd5b6002600081905550565b6001600081905550565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611126826110fb565b9050919050565b6111368161111b565b811461114157600080fd5b50565b6000813590506111538161112d565b92915050565b60006020828403121561116f5761116e6110f6565b5b600061117d84828501611144565b91505092915050565b6000819050919050565b61119981611186565b82525050565b60006020820190506111b46000830184611190565b92915050565b6111c381611186565b81146111ce57600080fd5b50565b6000813590506111e0816111ba565b92915050565b600080604083850312156111fd576111fc6110f6565b5b600061120b85828601611144565b925050602061121c858286016111d1565b9150509250929050565b61122f81611186565b82525050565b61123e8161111b565b82525050565b60408201600082015161125a6000850182611226565b50602082015161126d6020850182611235565b50505050565b60006040820190506112886000830184611244565b92915050565b6000806000606084860312156112a7576112a66110f6565b5b60006112b586828701611144565b93505060206112c6868287016111d1565b92505060406112d7868287016111d1565b9150509250925092565b6000815190506112f08161112d565b92915050565b60006020828403121561130c5761130b6110f6565b5b600061131a848285016112e1565b91505092915050565b61132c8161111b565b82525050565b60006060820190506113476000830186611323565b6113546020830185611190565b6113616040830184611323565b949350505050565b600060408201905061137e6000830185611323565b61138b6020830184611190565b9392505050565b60006040820190506113a76000830185611190565b6113b46020830184611323565b9392505050565b60006080820190506113d06000830187611323565b6113dd6020830186611190565b6113ea6040830185611190565b6113f76060830184611323565b95945050505050565b600081905092915050565b50565b600061141b600083611400565b91506114268261140b565b600082019050919050565b600061143c8261140e565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061148d600f83611446565b915061149882611457565b602082019050919050565b600060208201905081810360008301526114bc81611480565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114fd82611186565b915061150883611186565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561153d5761153c6114c3565b5b828201905092915050565b600060608201905061155d6000830186611323565b61156a6020830185611323565b6115776040830184611190565b949350505050565b600060a0820190506115946000830188611323565b6115a16020830187611190565b6115ae6040830186611323565b6115bb6060830185611323565b6115c86080830184611190565b9695505050505050565b60006060820190506115e76000830186611323565b6115f46020830185611190565b6116016040830184611190565b949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061163f601f83611446565b915061164a82611609565b602082019050919050565b6000602082019050818103600083015261166e81611632565b905091905056fea2646970667358221220bb31fa783b596c891a370c83146a1ee706d8ffcada0b13efc876bfec44d90c9c64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2996,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2951_storage))"
      },
      {
        "astId": 3000,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2951_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Marketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2951_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2951_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2951_storage"
      },
      "t_struct(Listing)2951_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Listing",
        "members": [
          {
            "astId": 2948,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2950,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}